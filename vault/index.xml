<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Vaults on</title><link>https://lucasforato.github.io/digital-garden/vault/</link><description>Recent content in Vaults on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://lucasforato.github.io/digital-garden/vault/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://lucasforato.github.io/digital-garden/vault/inbox/ActiveMQ/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lucasforato.github.io/digital-garden/vault/inbox/ActiveMQ/</guid><description>DEFINITION An open-source message-oriented middleware that supports the Java Message Service (JMS) standard. ActiveMQ provides features like message persistence, high availability, and clustering for scalable message processing.</description></item><item><title/><link>https://lucasforato.github.io/digital-garden/vault/inbox/Adapter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lucasforato.github.io/digital-garden/vault/inbox/Adapter/</guid><description>DEFINITION The adapter will act as a bridge that connects the [[Plugins]] to the [[Core]] of the [[Microkernel Architecture]]. The adapter makes sure that both APIs can understand each others contract.</description></item><item><title/><link>https://lucasforato.github.io/digital-garden/vault/inbox/Apache-Kafka/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lucasforato.github.io/digital-garden/vault/inbox/Apache-Kafka/</guid><description>DEFINITION A distributed streaming platform that provides high-throughput, fault-tolerant messaging. Kafka is known for its scalability, durability, and ability to handle real-time data streams.</description></item><item><title/><link>https://lucasforato.github.io/digital-garden/vault/inbox/API-Gateway/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lucasforato.github.io/digital-garden/vault/inbox/API-Gateway/</guid><description>DEFINITION What is an API gateway?
REVIEWS #⌛</description></item><item><title/><link>https://lucasforato.github.io/digital-garden/vault/inbox/API-Manager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lucasforato.github.io/digital-garden/vault/inbox/API-Manager/</guid><description>DEFINITION What is an API manager?
REVIEWS #⌛</description></item><item><title/><link>https://lucasforato.github.io/digital-garden/vault/inbox/API-REST-based-topology/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lucasforato.github.io/digital-garden/vault/inbox/API-REST-based-topology/</guid><description>DEFINITION This topology for [[Microservices Architecture]] is useful for websites that expose small, self-contained individual services through some sort of API.</description></item><item><title/><link>https://lucasforato.github.io/digital-garden/vault/inbox/Application-REST-based-topology/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lucasforato.github.io/digital-garden/vault/inbox/Application-REST-based-topology/</guid><description>DEFINITION LINKS TO It is like the[[API REST-based topology]], but we have a layer called the User Interface Layer, which is responsible for routing the requests to the standalone services.</description></item><item><title/><link>https://lucasforato.github.io/digital-garden/vault/inbox/Architecture-Patterns-Analysis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lucasforato.github.io/digital-garden/vault/inbox/Architecture-Patterns-Analysis/</guid><description>![[Architecture Patterns Analysis Image.png]]</description></item><item><title/><link>https://lucasforato.github.io/digital-garden/vault/inbox/Architecture-Patterns/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lucasforato.github.io/digital-garden/vault/inbox/Architecture-Patterns/</guid><description>[[Event-driven Architecture]] =&amp;gt; highly scalable, but difficult to maintain.
[[Layered Architecture]] =&amp;gt; not so highly scalable, but very easy to maintain.</description></item><item><title/><link>https://lucasforato.github.io/digital-garden/vault/inbox/Asynchronous-Communication/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lucasforato.github.io/digital-garden/vault/inbox/Asynchronous-Communication/</guid><description>DEFINITION asynchronous communication allows services to send messages and continue with their own processing without blocking or waiting for a response.</description></item><item><title/><link>https://lucasforato.github.io/digital-garden/vault/inbox/Broker-Topology/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lucasforato.github.io/digital-garden/vault/inbox/Broker-Topology/</guid><description>DEFINITION The broker topology differs from the mediator topology in that there is no central [[Event Mediator]]; rather, the message flow is distributed across the [[Event Processors]] components in a chain-like fashion through a lightweight [[Message Broker]].</description></item><item><title/><link>https://lucasforato.github.io/digital-garden/vault/inbox/Brokers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lucasforato.github.io/digital-garden/vault/inbox/Brokers/</guid><description>DEFINITION A broker is responsible for routing the [[request]] to the correct service that will handle that request.
REVIEWS #⭐</description></item><item><title/><link>https://lucasforato.github.io/digital-garden/vault/inbox/Business-layer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lucasforato.github.io/digital-garden/vault/inbox/Business-layer/</guid><description>DEFINITION In a layered architecture, the business layer, also known as the logic layer, application layer or domain layer, is responsible for handling the business logic and rules of an application or system.</description></item><item><title/><link>https://lucasforato.github.io/digital-garden/vault/inbox/Centralized-Messaging-topology/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lucasforato.github.io/digital-garden/vault/inbox/Centralized-Messaging-topology/</guid><description>DEFINITION It is similar to the [[Application REST-based topology]] but instead of a REST API, the Centralized Messaging topology has a lightweight [[Message Broker|message broker]] layer to deal with communication between services.</description></item><item><title/><link>https://lucasforato.github.io/digital-garden/vault/inbox/Components-in-a-Mediator-Topology/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lucasforato.github.io/digital-garden/vault/inbox/Components-in-a-Mediator-Topology/</guid><description>THOUGHT there are four types of architectural components in a [[Mediator Topology]].
[[Event Queues]]
[[Event Mediator]]
[[Event Channels]]</description></item><item><title/><link>https://lucasforato.github.io/digital-garden/vault/inbox/Computer-Networks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lucasforato.github.io/digital-garden/vault/inbox/Computer-Networks/</guid><description>DEFINITION A collection of autonomous computers interconnected by a single technology. Networks have many forms and shapes, the most well know network of computers is the [[Internet]].</description></item><item><title/><link>https://lucasforato.github.io/digital-garden/vault/inbox/Concurrency/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lucasforato.github.io/digital-garden/vault/inbox/Concurrency/</guid><description>DEFINITION Concurrency refers to the ability of a system or program to handle multiple tasks or [[Processes]] simultaneously. It is a property of systems that allows multiple actions to occur concurrently, without one action necessarily waiting for the other to complete.</description></item><item><title/><link>https://lucasforato.github.io/digital-garden/vault/inbox/Contract/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lucasforato.github.io/digital-garden/vault/inbox/Contract/</guid><description>DEFINITION A group of rules that are usually used by the API.
EXAMPLE There are some contracts being established below.</description></item><item><title/><link>https://lucasforato.github.io/digital-garden/vault/inbox/Core/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lucasforato.github.io/digital-garden/vault/inbox/Core/</guid><description>DEFINITION The core of a [[Microkernel Architecture]] is only the most important code to solve some problem and has the capability to connect to other systems.</description></item><item><title/><link>https://lucasforato.github.io/digital-garden/vault/inbox/Data-Grid/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lucasforato.github.io/digital-garden/vault/inbox/Data-Grid/</guid><description>In a [[Space-based Architecture]], a data grid refers to a distributed and scalable data storage and processing system that spans multiple nodes or servers in a network.</description></item><item><title/><link>https://lucasforato.github.io/digital-garden/vault/inbox/Data-inconsistency/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lucasforato.github.io/digital-garden/vault/inbox/Data-inconsistency/</guid><description>DEFINITION In a concurrent system, when multiple [[Thread|threads]] or [[Processes|processes]] access and modify shared data simultaneously, it can lead to data inconsistency.</description></item><item><title/><link>https://lucasforato.github.io/digital-garden/vault/inbox/Deadlocks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lucasforato.github.io/digital-garden/vault/inbox/Deadlocks/</guid><description>DEFINITION A deadlock occurs when two or more processes or threads are unable to proceed because each is waiting for the other to release a resource.</description></item><item><title/><link>https://lucasforato.github.io/digital-garden/vault/inbox/Dependency-Inversion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lucasforato.github.io/digital-garden/vault/inbox/Dependency-Inversion/</guid><description>DEFINITION This principle says a Class should not be fused with the tool it uses to execute an action. Rather, it should be fused to the interface that will allow the tool to connect to the Class.</description></item><item><title/><link>https://lucasforato.github.io/digital-garden/vault/inbox/Deployment-Manager/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lucasforato.github.io/digital-garden/vault/inbox/Deployment-Manager/</guid><description>DEFINITION The deployment-manager component manages the dynamic startup and shutdown of [[Processing Unit|processing units]] based on load conditions. This component continually monitors response times and user loads, and starts up new processing units when load increases, and shuts down processing units when the load decreases.</description></item><item><title/><link>https://lucasforato.github.io/digital-garden/vault/inbox/DRY/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lucasforato.github.io/digital-garden/vault/inbox/DRY/</guid><description>DEFINITION Don&amp;rsquo;t Repeat Yourself. You should never rewrite code that has already been written.
RULE OF THUMB Upon seeing repetition more than 3 times, you should put that code in a class of function and it will not be repeated again.</description></item><item><title/><link>https://lucasforato.github.io/digital-garden/vault/inbox/Event-Channels/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lucasforato.github.io/digital-garden/vault/inbox/Event-Channels/</guid><description>DEFINITION An event channel acts as a central hub or intermediary, where components can publish events and subscribe to events of interest.</description></item><item><title/><link>https://lucasforato.github.io/digital-garden/vault/inbox/Event-Mediator/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lucasforato.github.io/digital-garden/vault/inbox/Event-Mediator/</guid><description>DEFINITION The event mediator receives the initial event and orchestrates that event by sending additional asynchronous events to [[Event Channels]] to execute each step of the process.</description></item><item><title/><link>https://lucasforato.github.io/digital-garden/vault/inbox/Event-Processors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lucasforato.github.io/digital-garden/vault/inbox/Event-Processors/</guid><description>DEFINITION The event processor is responsible for executing the logic. The event processor uses modules to execute business logic. The event processors are self-contained, meaning they cannot use other event processors to execute their logic.</description></item><item><title/><link>https://lucasforato.github.io/digital-garden/vault/inbox/Event-Queues/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lucasforato.github.io/digital-garden/vault/inbox/Event-Queues/</guid><description>DEFINITION The event queue is the beginning of every request. The queue works in a [[Pub-Sub Pattern|publish-subscribe mechanism]] where an event is published and has to wait until the [[Event Mediator]] can handle the request.</description></item><item><title/><link>https://lucasforato.github.io/digital-garden/vault/inbox/Event-driven-Architecture/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lucasforato.github.io/digital-garden/vault/inbox/Event-driven-Architecture/</guid><description>DEFINITION In this architecture, the system is built around handling and responding to [[Event|events]]. Instead of executing a predefined sequence of steps, the system listens for [[Event|events]] and reacts accordingly.</description></item><item><title/><link>https://lucasforato.github.io/digital-garden/vault/inbox/Event/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lucasforato.github.io/digital-garden/vault/inbox/Event/</guid><description>DEFINITION An event can be thought of as a trigger or notification that something has happened or changed in the system.</description></item><item><title/><link>https://lucasforato.github.io/digital-garden/vault/inbox/Global-Modules/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lucasforato.github.io/digital-garden/vault/inbox/Global-Modules/</guid><description>DEFINITION Global modules is a concept introduced by the [[Layered Architecture]] pattern, but there they are know as open layers. In [[NestJS]], global modules are modules that can be accessed by any other module in an application.</description></item><item><title/><link>https://lucasforato.github.io/digital-garden/vault/inbox/Horizontal-Scalability/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lucasforato.github.io/digital-garden/vault/inbox/Horizontal-Scalability/</guid><description>DEFINITION Horizontal scaling is when we scale by increasing the number of machines for the system.
EXAMPLE IMAGE ![[Horizontal Scalability Image.</description></item><item><title/><link>https://lucasforato.github.io/digital-garden/vault/inbox/Initial-Event/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lucasforato.github.io/digital-garden/vault/inbox/Initial-Event/</guid><description>DEFINITION the initial event is before the [[Mediator]] enters in action, the original event sent by the client.
REVIEWS #⭐⭐⭐⭐⭐</description></item><item><title/><link>https://lucasforato.github.io/digital-garden/vault/inbox/Interface-Segregation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lucasforato.github.io/digital-garden/vault/inbox/Interface-Segregation/</guid><description>DEFINITION A Class should perform only actions that are needed to fulfil its role.
GOAL This principle aims at splitting a set of actions into smaller sets so that a Class executes ONLY the set of actions it requires.</description></item><item><title/><link>https://lucasforato.github.io/digital-garden/vault/inbox/Layered-Architecture/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lucasforato.github.io/digital-garden/vault/inbox/Layered-Architecture/</guid><description>DEFINITION This pattern is the de facto standard for most Java EE applications and therefore is widely known by most architects, designers, and developers.</description></item><item><title/><link>https://lucasforato.github.io/digital-garden/vault/inbox/Learning-with-Renan/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lucasforato.github.io/digital-garden/vault/inbox/Learning-with-Renan/</guid><description>TALKS [[Talk 1]] -&amp;gt; talked mainly about architecture patterns. [[Talk 2]]</description></item><item><title/><link>https://lucasforato.github.io/digital-garden/vault/inbox/Linux-file-system/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lucasforato.github.io/digital-garden/vault/inbox/Linux-file-system/</guid><description>IMAGE ![[linux file system image.jpeg]]
REVIEWS #⌛</description></item><item><title/><link>https://lucasforato.github.io/digital-garden/vault/inbox/Liskov-Substitution/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lucasforato.github.io/digital-garden/vault/inbox/Liskov-Substitution/</guid><description>DEFINITION The child Class should be able to process the same requests and deliver the same result as the parent Class or it could deliver a result that is of the same type.</description></item><item><title/><link>https://lucasforato.github.io/digital-garden/vault/inbox/locks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lucasforato.github.io/digital-garden/vault/inbox/locks/</guid><description/></item><item><title/><link>https://lucasforato.github.io/digital-garden/vault/inbox/Mediator-Topology/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lucasforato.github.io/digital-garden/vault/inbox/Mediator-Topology/</guid><description>DEFINITION The mediator topology is useful for events that have multiple steps and require some level of orchestration to process the event.</description></item><item><title/><link>https://lucasforato.github.io/digital-garden/vault/inbox/Message-Broker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lucasforato.github.io/digital-garden/vault/inbox/Message-Broker/</guid><description>DEFINITION A message broker is a key component in a messaging system that acts as an intermediary for communication between different applications or systems.</description></item><item><title/><link>https://lucasforato.github.io/digital-garden/vault/inbox/Messaging-Based-Architecture/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lucasforato.github.io/digital-garden/vault/inbox/Messaging-Based-Architecture/</guid><description>DEFINITION A messaging-based architecture is a design approach where systems communicate by sending messages to each other. Instead of directly calling methods or services, components exchange messages through a messaging infrastructure.</description></item><item><title/><link>https://lucasforato.github.io/digital-garden/vault/inbox/Messaging-grid/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lucasforato.github.io/digital-garden/vault/inbox/Messaging-grid/</guid><description>DEFINITION The messaging grid manages input request and session information. When a request comes into the [[Virtualized Middleware]] component, the messaging-grid component determines which active [[Processing Unit]] components are available to receive the request and forwards the request to one of those processing units.</description></item><item><title/><link>https://lucasforato.github.io/digital-garden/vault/inbox/messaging-infrastructure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lucasforato.github.io/digital-garden/vault/inbox/messaging-infrastructure/</guid><description/></item><item><title/><link>https://lucasforato.github.io/digital-garden/vault/inbox/Microkernel-Architecture/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lucasforato.github.io/digital-garden/vault/inbox/Microkernel-Architecture/</guid><description>DEFINITION the microkernel Architectural pattern is netural for applications that have [[Plugins]]. They are natural for that type of work because it is easy to implement [[Plugins]].</description></item><item><title/><link>https://lucasforato.github.io/digital-garden/vault/inbox/Microservices-Architecture/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lucasforato.github.io/digital-garden/vault/inbox/Microservices-Architecture/</guid><description>DEFINITION In a microservices architecture, we deploy separated [[Service Components]] that act as building blocks that together can perform all the actions of the application.</description></item><item><title/><link>https://lucasforato.github.io/digital-garden/vault/inbox/Monolithic-Application/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lucasforato.github.io/digital-garden/vault/inbox/Monolithic-Application/</guid><description>DEFINITION A Monolithic Application is an application that usually follows a [[Layered Architecture|layered architecture]]. It is a unique service that is responsible for all functionality in a system.</description></item><item><title/><link>https://lucasforato.github.io/digital-garden/vault/inbox/NestJS/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lucasforato.github.io/digital-garden/vault/inbox/NestJS/</guid><description>DEFINITION NestJS is a NodeJS backend framework that works very well as a starting point for a backend application, usually using the [[Layered Architecture]].</description></item><item><title/><link>https://lucasforato.github.io/digital-garden/vault/inbox/Observer-Pattern/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lucasforato.github.io/digital-garden/vault/inbox/Observer-Pattern/</guid><description>DEFINITION RESOURCE click here to open resource
REVIEWS #⌛</description></item><item><title/><link>https://lucasforato.github.io/digital-garden/vault/inbox/Open-Closed/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lucasforato.github.io/digital-garden/vault/inbox/Open-Closed/</guid><description>DEFINITION Classes should be open for extension but closed for modification.
GOAL This principle aims to extend a Class’s behavior without changing the existing behavior of that Class.</description></item><item><title/><link>https://lucasforato.github.io/digital-garden/vault/inbox/Orchestration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lucasforato.github.io/digital-garden/vault/inbox/Orchestration/</guid><description>DEFINITION Orchestration is commonly used in various contexts, including [[Microservices Architecture]], distributed systems, workflow management systems, and containerized environments. It allows developers and system administrators to automate complex processes, coordinate interactions between different [[Service Components]], and streamline the execution of applications or services to achieve efficient and reliable results.</description></item><item><title/><link>https://lucasforato.github.io/digital-garden/vault/inbox/Oreilly-Stock-Trade-Example/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lucasforato.github.io/digital-garden/vault/inbox/Oreilly-Stock-Trade-Example/</guid><description>EXAMPLE For example, a single event to place a stock trade might require you to first validate the trade, then check the compliance of that stock trade against various compliance rules, assign the trade to a broker, calculate the commission, and finally place the trade with that broker.</description></item><item><title/><link>https://lucasforato.github.io/digital-garden/vault/inbox/Performance-overhead/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lucasforato.github.io/digital-garden/vault/inbox/Performance-overhead/</guid><description>DEFINITION Coordinating and managing concurrency comes with an overhead cost. The additional complexity introduced by synchronization mechanisms, such as [[locks]] or [[semaphores]], can impact the overall performance of the system.</description></item><item><title/><link>https://lucasforato.github.io/digital-garden/vault/inbox/Persistence-layer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lucasforato.github.io/digital-garden/vault/inbox/Persistence-layer/</guid><description>DEFINITION The persistence layer is responsible for saving and retrieving data, it sits after the [[Business layer]] and talks to an ORM or directly to a database in order to persist data.</description></item><item><title/><link>https://lucasforato.github.io/digital-garden/vault/inbox/Plugins/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lucasforato.github.io/digital-garden/vault/inbox/Plugins/</guid><description>MY DEFINITION Additional application features as plug-ins to the core application. They add functionality to the application.
DEFINITION BY OREILLY The plug-in modules are stand-alone, independent components that contain specialized processing, additional features, and custom code that is meant to enhance or extend the core system to produce additional business capabilities.</description></item><item><title/><link>https://lucasforato.github.io/digital-garden/vault/inbox/Point-to-point/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lucasforato.github.io/digital-garden/vault/inbox/Point-to-point/</guid><description>DEFINITION Connects individual pairs of machines.
HOW DOES IT WORK? short messages called [[Packets]] are sent from one computer to another until it reaches the destination.</description></item><item><title/><link>https://lucasforato.github.io/digital-garden/vault/inbox/Presentation-layer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lucasforato.github.io/digital-garden/vault/inbox/Presentation-layer/</guid><description>DEFINITION the presentation layer is responsible for capturing requests and delivering responses to a client, usually in a nice front-end interface.</description></item><item><title/><link>https://lucasforato.github.io/digital-garden/vault/inbox/Processes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lucasforato.github.io/digital-garden/vault/inbox/Processes/</guid><description/></item><item><title/><link>https://lucasforato.github.io/digital-garden/vault/inbox/Processing-Event/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lucasforato.github.io/digital-garden/vault/inbox/Processing-Event/</guid><description>DEFINITION the processing event is the event the is being processed by the [[Event Processors]].
REVIEWS #⭐⭐⭐⭐⭐</description></item><item><title/><link>https://lucasforato.github.io/digital-garden/vault/inbox/Processing-Grid/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lucasforato.github.io/digital-garden/vault/inbox/Processing-Grid/</guid><description>DEFINITION is an optional component within the virtualized middleware that manages distributed request processing when there are multiple processing units, each handling a portion of the application.</description></item><item><title/><link>https://lucasforato.github.io/digital-garden/vault/inbox/Processing-Unit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lucasforato.github.io/digital-garden/vault/inbox/Processing-Unit/</guid><description>DEFINITION The processing-unit component contains the application components (or portions of the application components). This includes web-based components as well as backend business logic.</description></item><item><title/><link>https://lucasforato.github.io/digital-garden/vault/inbox/Proxy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lucasforato.github.io/digital-garden/vault/inbox/Proxy/</guid><description>DEFINITION A proxy acts as a bridge between the client and the server. The proxy receives the requests and forwards it to the target server, retrieving the response that needs to be sent to the client.</description></item><item><title/><link>https://lucasforato.github.io/digital-garden/vault/inbox/Pub-Sub-Pattern/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lucasforato.github.io/digital-garden/vault/inbox/Pub-Sub-Pattern/</guid><description>DEFINITION This pattern works much like the [[Observer Pattern]], events are published (pub) by a service and other services can subscribe (sub) to the events that interest them.</description></item><item><title/><link>https://lucasforato.github.io/digital-garden/vault/inbox/RabbitMQ/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lucasforato.github.io/digital-garden/vault/inbox/RabbitMQ/</guid><description>DEFINITION A robust and flexible messaging broker that implements the Advanced Message Queuing Protocol (AMQP). RabbitMQ offers reliable message delivery, various messaging patterns, and support for multiple programming languages.</description></item><item><title/><link>https://lucasforato.github.io/digital-garden/vault/inbox/Race-conditions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lucasforato.github.io/digital-garden/vault/inbox/Race-conditions/</guid><description>DEFINITION Race conditions occur when multiple threads or [[Processes|processes]] access shared resources or variables concurrently, leading to unpredictable and incorrect results.</description></item><item><title/><link>https://lucasforato.github.io/digital-garden/vault/inbox/Relay-Race-Example/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lucasforato.github.io/digital-garden/vault/inbox/Relay-Race-Example/</guid><description>EXAMPLE In a relay race, runners hold a baton and run for a certain distance, then hand off the baton to the next runner, and so on down the chain until the last runner crosses the finish line.</description></item><item><title/><link>https://lucasforato.github.io/digital-garden/vault/inbox/REST/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lucasforato.github.io/digital-garden/vault/inbox/REST/</guid><description>DEFINITION</description></item><item><title/><link>https://lucasforato.github.io/digital-garden/vault/inbox/S.O.L.I.D./</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lucasforato.github.io/digital-garden/vault/inbox/S.O.L.I.D./</guid><description>TO GET STARTED These five software development principles are guidelines to follow when building software so that it is easier to scale and maintain.</description></item><item><title/><link>https://lucasforato.github.io/digital-garden/vault/inbox/Service-Components/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lucasforato.github.io/digital-garden/vault/inbox/Service-Components/</guid><description>DEFINITION A component is a piece of software that is responsible for dealing with a specific set of tasks that are usually related, like a CMS deals with content.</description></item><item><title/><link>https://lucasforato.github.io/digital-garden/vault/inbox/Single-Responsibility/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lucasforato.github.io/digital-garden/vault/inbox/Single-Responsibility/</guid><description>DEFINITION A class should have a single responsibility.
EXAMPLE IMAGE ![[Single Responsibility Image.png]]
REVIEWS #⌛</description></item><item><title/><link>https://lucasforato.github.io/digital-garden/vault/inbox/Space-based-Architecture/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lucasforato.github.io/digital-garden/vault/inbox/Space-based-Architecture/</guid><description>DEFINITION The pattern gets its name from [[tuple space]]. The pattern removes the central database to achieve almost infinite scalability, since the biggest issue when it comes to scalability is scaling the database.</description></item><item><title/><link>https://lucasforato.github.io/digital-garden/vault/inbox/Spring-Integration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lucasforato.github.io/digital-garden/vault/inbox/Spring-Integration/</guid><description>DEFINITION Spring Integration is a lightweight framework within the larger Spring ecosystem that enables the integration of disparate systems and applications in a [[Messaging Based Architecture]].</description></item><item><title/><link>https://lucasforato.github.io/digital-garden/vault/inbox/Starvation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lucasforato.github.io/digital-garden/vault/inbox/Starvation/</guid><description>DEFINITION Starvation happens when a process or thread is unable to acquire the necessary resources or execution time due to the dominance of other processes.</description></item><item><title/><link>https://lucasforato.github.io/digital-garden/vault/inbox/Talk-1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lucasforato.github.io/digital-garden/vault/inbox/Talk-1/</guid><description>COMMENTS Study about [[Event Sourcing]]
DATE 25/05/2023
REVIEWS #⌛</description></item><item><title/><link>https://lucasforato.github.io/digital-garden/vault/inbox/Talk-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lucasforato.github.io/digital-garden/vault/inbox/Talk-2/</guid><description>QUESTIONS do you have any project where I could see what an event is? notifications service buffer
what is the difference between an event-driven-architecture and a microservices architecture?</description></item><item><title/><link>https://lucasforato.github.io/digital-garden/vault/inbox/Thread/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lucasforato.github.io/digital-garden/vault/inbox/Thread/</guid><description/></item><item><title/><link>https://lucasforato.github.io/digital-garden/vault/inbox/Topic-Queue/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lucasforato.github.io/digital-garden/vault/inbox/Topic-Queue/</guid><description>DEFINITION The topic queue acts as an intermediary between publishers and subscribers, ensuring that events are properly delivered to the interested parties.</description></item><item><title/><link>https://lucasforato.github.io/digital-garden/vault/inbox/Transport-Layer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lucasforato.github.io/digital-garden/vault/inbox/Transport-Layer/</guid><description>DEFINITION The transport layer is responsible for receiving requests and delivering responses to clients.
REVIEWS #⭐</description></item><item><title/><link>https://lucasforato.github.io/digital-garden/vault/inbox/tuple-space/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lucasforato.github.io/digital-garden/vault/inbox/tuple-space/</guid><description/></item><item><title/><link>https://lucasforato.github.io/digital-garden/vault/inbox/Use-Case/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lucasforato.github.io/digital-garden/vault/inbox/Use-Case/</guid><description>DEFINITION a use case is responsible for orchestrating other components in the domain layer to execute a task.
REVIEWS #⌛</description></item><item><title/><link>https://lucasforato.github.io/digital-garden/vault/inbox/Vertical-Scalability/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lucasforato.github.io/digital-garden/vault/inbox/Vertical-Scalability/</guid><description>DEFINITION Vertical scaling is about increasing the resources of an existing machine by increasing RAM, CPU, and so on.
EXAMPLE IMAGE !</description></item><item><title/><link>https://lucasforato.github.io/digital-garden/vault/inbox/Virtualized-Middleware/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lucasforato.github.io/digital-garden/vault/inbox/Virtualized-Middleware/</guid><description>DEFINITION The virtualized-middleware component handles housekeeping and communications. It contains components that control various aspects of data synchronization and request handling.</description></item><item><title/><link>https://lucasforato.github.io/digital-garden/vault/inbox/What-is-a-database-transaction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lucasforato.github.io/digital-garden/vault/inbox/What-is-a-database-transaction/</guid><description>DEFINITION Database transaction is a group of requests to the database that are performed together as a single one.
REVIEWS #⌛</description></item><item><title/><link>https://lucasforato.github.io/digital-garden/vault/inbox/Why-should-I-use-layered-architecture/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lucasforato.github.io/digital-garden/vault/inbox/Why-should-I-use-layered-architecture/</guid><description>Why should I use a [[layered architecture]]? changes are isolated to specific components of the application since they deal with specific tasks, it makes it easier to maintain code and therefore cheaper.</description></item><item><title/><link>https://lucasforato.github.io/digital-garden/vault/templates/DEFINITION/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lucasforato.github.io/digital-garden/vault/templates/DEFINITION/</guid><description>DEFINITION</description></item><item><title/><link>https://lucasforato.github.io/digital-garden/vault/templates/REVIEWS/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lucasforato.github.io/digital-garden/vault/templates/REVIEWS/</guid><description>REVIEWS #⌛ %%no reviews%%
#⭐ %%one review%%
#⭐⭐ %%two reviews%%
#⭐⭐⭐ %%three reviews%%
#⭐⭐⭐⭐ %%four reviews%%
#⭐⭐⭐⭐⭐ %%five reviews%%</description></item><item><title/><link>https://lucasforato.github.io/digital-garden/vault/templates/REVIEWS/REVIEWS-0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lucasforato.github.io/digital-garden/vault/templates/REVIEWS/REVIEWS-0/</guid><description>REVIEWS #⌛</description></item><item><title/><link>https://lucasforato.github.io/digital-garden/vault/templates/REVIEWS/REVIEWS-1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lucasforato.github.io/digital-garden/vault/templates/REVIEWS/REVIEWS-1/</guid><description>REVIEWS #⭐</description></item><item><title/><link>https://lucasforato.github.io/digital-garden/vault/templates/REVIEWS/REVIEWS-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lucasforato.github.io/digital-garden/vault/templates/REVIEWS/REVIEWS-2/</guid><description>REVIEWS #⭐⭐</description></item><item><title/><link>https://lucasforato.github.io/digital-garden/vault/templates/REVIEWS/REVIEWS-3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lucasforato.github.io/digital-garden/vault/templates/REVIEWS/REVIEWS-3/</guid><description>REVIEWS #⭐⭐⭐</description></item><item><title/><link>https://lucasforato.github.io/digital-garden/vault/templates/REVIEWS/REVIEWS-4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lucasforato.github.io/digital-garden/vault/templates/REVIEWS/REVIEWS-4/</guid><description>REVIEWS #⭐⭐⭐⭐</description></item><item><title/><link>https://lucasforato.github.io/digital-garden/vault/templates/REVIEWS/REVIEWS-5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lucasforato.github.io/digital-garden/vault/templates/REVIEWS/REVIEWS-5/</guid><description>REVIEWS #⭐⭐⭐⭐⭐</description></item><item><title/><link>https://lucasforato.github.io/digital-garden/vault/templates/TECH-TALKS-WITH-RENAN/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://lucasforato.github.io/digital-garden/vault/templates/TECH-TALKS-WITH-RENAN/</guid><description>QUESTIONS %%questions here%%
COMMENTS %%general notes%%
KNOWLEDGE GAPS %%add here things that I could not explain or did not understand fully%%</description></item></channel></rss>